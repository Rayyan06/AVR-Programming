
reactionTime.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
{
    // ----------- Inits ----------- //
    char byte;
    uint16_t timerValue;

    initUSART();
  96:	0e 94 16 01 	call	0x22c	; 0x22c <initUSART>

// ----------- Functions ----------- //
static inline void initTimer1(void)
{
    /* Normal mode (default), just counting */
    TCCR1B |= (1 << CS11) | (1 << CS10);
  9a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    char byte;
    uint16_t timerValue;

    initUSART();
    initTimer1();
    LED_DDR = 0xff;               /* all LEDs for output */
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 b9       	out	0x04, r24	; 4
    BUTTON_PORT |= (1 << BUTTON); /* enable internal pull-up */
  a8:	5a 9a       	sbi	0x0b, 2	; 11

    printString("\r\nReaction Timer:\r\n");
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
    printString("----------------\r\n");
  b2:	84 e1       	ldi	r24, 0x14	; 20
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
    printString("Press any key to start.\r\n");
  ba:	87 e2       	ldi	r24, 0x27	; 39
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
    {
        byte = receiveByte();
        printString("\r\nGet ready...");
        randomDelay();
        printString("\r\nGo!\r\n");
        LED_PORT = 0xff; /* light LEDs*/
  c2:	1f ef       	ldi	r17, 0xFF	; 255
    printString("Press any key to start.\r\n");

    // ----------- Event Loop ----------- //
    while (1)
    {
        byte = receiveByte();
  c4:	0e 94 2e 01 	call	0x25c	; 0x25c <receiveByte>
        printString("\r\nGet ready...");
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
        randomDelay();
  d0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <randomDelay>
        printString("\r\nGo!\r\n");
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
        LED_PORT = 0xff; /* light LEDs*/
  dc:	15 b9       	out	0x05, r17	; 5
        TCNT1 = 0;       /* reset counter*/
  de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

        if (bit_is_clear(BUTTON_PIN, BUTTON))
  e6:	4a 99       	sbic	0x09, 2	; 9
  e8:	0a c0       	rjmp	.+20     	; 0xfe <main+0x68>
        {
            /* Button pressed _exactly_ as LEDs light up. Suspicious. */
            printString("You're only cheating yourself.\r\n");
  ea:	88 e5       	ldi	r24, 0x58	; 88
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
            printMilliseconds(timerValue);
            printComments(timerValue);
        }

        // Clear LEDs and start again.
        LED_PORT = 0x00;
  f2:	15 b8       	out	0x05, r1	; 5
        printString("Press any key to try again.\r\n");
  f4:	89 e7       	ldi	r24, 0x79	; 121
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
    printString("Press any key to start.\r\n");

    // ----------- Event Loop ----------- //
    while (1)
    {
        byte = receiveByte();
  fc:	e3 cf       	rjmp	.-58     	; 0xc4 <main+0x2e>
            printString("You're only cheating yourself.\r\n");
        }
        else
        {
            // Wait until button pressed, save timer value.
            loop_until_bit_is_clear(BUTTON_PIN, BUTTON);
  fe:	4a 99       	sbic	0x09, 2	; 9
 100:	fe cf       	rjmp	.-4      	; 0xfe <main+0x68>
            timerValue = TCNT1 >> 4;
 102:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 106:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	d6 95       	lsr	r29
 10e:	c7 95       	ror	r28
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x76>
            /* each tick is approx 1/16 milliseconds, so we bit-shift divide */
            printMilliseconds(timerValue);
 114:	ce 01       	movw	r24, r28
 116:	0e 94 91 00 	call	0x122	; 0x122 <printMilliseconds>
            printComments(timerValue);
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <printComments>
 120:	e8 cf       	rjmp	.-48     	; 0xf2 <main+0x5c>

00000122 <printMilliseconds>:

#include "support.h"

void printMilliseconds(uint16_t value)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
       you took over the serial port.  Does ascii conversion, prints
       decimal point, and drops extra leading zeros.
     */
    uint8_t digit;

    printString("\r\nYou took ");
 128:	87 e9       	ldi	r24, 0x97	; 151
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 35 01 	call	0x26a	; 0x26a <printString>
    /* add up ten-thousands */
    digit = 0;
 130:	80 e0       	ldi	r24, 0x00	; 0
    while (value >= 10000)
 132:	c0 31       	cpi	r28, 0x10	; 16
 134:	97 e2       	ldi	r25, 0x27	; 39
 136:	d9 07       	cpc	r29, r25
 138:	40 f5       	brcc	.+80     	; 0x18a <printMilliseconds+0x68>
    {
        digit++;
        value -= 10000;
    }
    if (digit)
 13a:	88 23       	and	r24, r24
 13c:	19 f0       	breq	.+6      	; 0x144 <printMilliseconds+0x22>
    {
        transmitByte('0' + digit);
 13e:	80 5d       	subi	r24, 0xD0	; 208
 140:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>
    }
    /* add up thousands */
    digit = 0;
 144:	80 e0       	ldi	r24, 0x00	; 0
    while (value >= 1000)
 146:	c8 3e       	cpi	r28, 0xE8	; 232
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	d9 07       	cpc	r29, r25
 14c:	10 f5       	brcc	.+68     	; 0x192 <printMilliseconds+0x70>
    {
        digit++;
        value -= 1000;
    }
    transmitByte('0' + digit);
 14e:	80 5d       	subi	r24, 0xD0	; 208
 150:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>

    /* decimal point here b/c dividing by 1000 */
    transmitByte('.');
 154:	8e e2       	ldi	r24, 0x2E	; 46
 156:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>

    /* add up hundreds */
    digit = 0;
 15a:	80 e0       	ldi	r24, 0x00	; 0
    while (value >= 100)
 15c:	c4 36       	cpi	r28, 0x64	; 100
 15e:	d1 05       	cpc	r29, r1
 160:	e0 f4       	brcc	.+56     	; 0x19a <printMilliseconds+0x78>
    {
        digit++;
        value -= 100;
    }
    transmitByte('0' + digit);
 162:	80 5d       	subi	r24, 0xD0	; 208
 164:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>
    /* add up tens */
    digit = 0;
 168:	80 e0       	ldi	r24, 0x00	; 0
    while (value >= 10)
 16a:	ca 30       	cpi	r28, 0x0A	; 10
 16c:	d1 05       	cpc	r29, r1
 16e:	c8 f4       	brcc	.+50     	; 0x1a2 <printMilliseconds+0x80>
    {
        digit++;
        value -= 10;
    }
    transmitByte('0' + digit);
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>

    // Ones digit is easy.
    transmitByte('0' + value);
 176:	8c 2f       	mov	r24, r28
 178:	80 5d       	subi	r24, 0xD0	; 208
 17a:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>

    printString(" seconds.\r\n");
 17e:	83 ea       	ldi	r24, 0xA3	; 163
 180:	91 e0       	ldi	r25, 0x01	; 1
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
    transmitByte('0' + digit);

    // Ones digit is easy.
    transmitByte('0' + value);

    printString(" seconds.\r\n");
 186:	0c 94 35 01 	jmp	0x26a	; 0x26a <printString>
    printString("\r\nYou took ");
    /* add up ten-thousands */
    digit = 0;
    while (value >= 10000)
    {
        digit++;
 18a:	8f 5f       	subi	r24, 0xFF	; 255
        value -= 10000;
 18c:	c0 51       	subi	r28, 0x10	; 16
 18e:	d7 42       	sbci	r29, 0x27	; 39
 190:	d0 cf       	rjmp	.-96     	; 0x132 <printMilliseconds+0x10>
    }
    /* add up thousands */
    digit = 0;
    while (value >= 1000)
    {
        digit++;
 192:	8f 5f       	subi	r24, 0xFF	; 255
        value -= 1000;
 194:	c8 5e       	subi	r28, 0xE8	; 232
 196:	d3 40       	sbci	r29, 0x03	; 3
 198:	d6 cf       	rjmp	.-84     	; 0x146 <printMilliseconds+0x24>

    /* add up hundreds */
    digit = 0;
    while (value >= 100)
    {
        digit++;
 19a:	8f 5f       	subi	r24, 0xFF	; 255
        value -= 100;
 19c:	c4 56       	subi	r28, 0x64	; 100
 19e:	d1 09       	sbc	r29, r1
 1a0:	dd cf       	rjmp	.-70     	; 0x15c <printMilliseconds+0x3a>
    transmitByte('0' + digit);
    /* add up tens */
    digit = 0;
    while (value >= 10)
    {
        digit++;
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
        value -= 10;
 1a4:	2a 97       	sbiw	r28, 0x0a	; 10
 1a6:	e1 cf       	rjmp	.-62     	; 0x16a <printMilliseconds+0x48>

000001a8 <printComments>:
}

void printComments(uint16_t value)
{
    /* Given a value in milliseconds, rates your reaction time */
    if (value > 2000)
 1a8:	81 3d       	cpi	r24, 0xD1	; 209
 1aa:	27 e0       	ldi	r18, 0x07	; 7
 1ac:	92 07       	cpc	r25, r18
 1ae:	20 f0       	brcs	.+8      	; 0x1b8 <printComments+0x10>
    {
        printString("---->  Ummm...this is a reaction timer...\r\n");
 1b0:	8f ea       	ldi	r24, 0xAF	; 175
 1b2:	91 e0       	ldi	r25, 0x01	; 1
    {
        printString("---->  Fast.\r\n");
    }
    else if (value < 150)
    {
        printString("---->  Amazing!\r\n");
 1b4:	0c 94 35 01 	jmp	0x26a	; 0x26a <printString>
    /* Given a value in milliseconds, rates your reaction time */
    if (value > 2000)
    {
        printString("---->  Ummm...this is a reaction timer...\r\n");
    }
    else if (value > 1000)
 1b8:	89 3e       	cpi	r24, 0xE9	; 233
 1ba:	23 e0       	ldi	r18, 0x03	; 3
 1bc:	92 07       	cpc	r25, r18
 1be:	18 f0       	brcs	.+6      	; 0x1c6 <printComments+0x1e>
    {
        printString("---->  Hello?\r\n");
 1c0:	8b ed       	ldi	r24, 0xDB	; 219
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	f7 cf       	rjmp	.-18     	; 0x1b4 <printComments+0xc>
    }
    else if (value > 500)
 1c6:	85 3f       	cpi	r24, 0xF5	; 245
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	92 07       	cpc	r25, r18
 1cc:	18 f0       	brcs	.+6      	; 0x1d4 <printComments+0x2c>
    {
        printString("---->  Slow.\r\n");
 1ce:	8b ee       	ldi	r24, 0xEB	; 235
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	f0 cf       	rjmp	.-32     	; 0x1b4 <printComments+0xc>
    }
    else if (value > 250)
 1d4:	8b 3f       	cpi	r24, 0xFB	; 251
 1d6:	91 05       	cpc	r25, r1
 1d8:	18 f0       	brcs	.+6      	; 0x1e0 <printComments+0x38>
    {
        printString("---->  Have another cup of coffee.\r\n");
 1da:	8a ef       	ldi	r24, 0xFA	; 250
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	ea cf       	rjmp	.-44     	; 0x1b4 <printComments+0xc>
    }
    else if (value > 200)
 1e0:	89 3c       	cpi	r24, 0xC9	; 201
 1e2:	91 05       	cpc	r25, r1
 1e4:	18 f0       	brcs	.+6      	; 0x1ec <printComments+0x44>
    {
        printString("---->  Respectable.\r\n");
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	e4 cf       	rjmp	.-56     	; 0x1b4 <printComments+0xc>
    }
    else if (value >= 150)
 1ec:	86 39       	cpi	r24, 0x96	; 150
 1ee:	91 05       	cpc	r25, r1
 1f0:	18 f0       	brcs	.+6      	; 0x1f8 <printComments+0x50>
    {
        printString("---->  Fast.\r\n");
 1f2:	85 e3       	ldi	r24, 0x35	; 53
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	de cf       	rjmp	.-68     	; 0x1b4 <printComments+0xc>
    }
    else if (value < 150)
    {
        printString("---->  Amazing!\r\n");
 1f8:	84 e4       	ldi	r24, 0x44	; 68
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	db cf       	rjmp	.-74     	; 0x1b4 <printComments+0xc>

000001fe <randomDelay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	83 ed       	ldi	r24, 0xD3	; 211
 202:	90 e3       	ldi	r25, 0x30	; 48
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <randomDelay+0x6>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <randomDelay+0x10>
 20e:	00 00       	nop
    /* It's not really random, but very hard to control --
       like coin-flipping. */
    uint8_t randomTime;

    _delay_ms(1000); /* wait at least 1 sec */
    randomTime = (uint8_t)TCNT1;
 210:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 214:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    /* type-casting the 16-bit TCNT1 as an 8-bit number keeps
       only the 8 least-significant (fastest-changing) bits  */
    while (--randomTime)
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	09 f4       	brne	.+2      	; 0x21e <randomDelay+0x20>
    {
        _delay_ms(10); /* max value is 255 ~= 2.5 sec */
    }
 21c:	08 95       	ret
 21e:	ef e3       	ldi	r30, 0x3F	; 63
 220:	fc e9       	ldi	r31, 0x9C	; 156
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <randomDelay+0x24>
 226:	00 c0       	rjmp	.+0      	; 0x228 <randomDelay+0x2a>
 228:	00 00       	nop
 22a:	f6 cf       	rjmp	.-20     	; 0x218 <randomDelay+0x1a>

0000022c <initUSART>:
#include <avr/io.h>
#include <util/setbaud.h>

void initUSART(void)
{                         /* requires BAUD */
    UBRR0H = UBRRH_VALUE; /* defined in setbaud.h */
 22c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = UBRRL_VALUE;
 230:	87 e6       	ldi	r24, 0x67	; 103
 232:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#if USE_2X
    UCSR0A |= (1 << U2X0);
#else
    UCSR0A &= ~(1 << U2X0);
 236:	e0 ec       	ldi	r30, 0xC0	; 192
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	8d 7f       	andi	r24, 0xFD	; 253
 23e:	80 83       	st	Z, r24
#endif
    /* Enable USART transmitter/receiver */
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
}
 24c:	08 95       	ret

0000024e <transmitByte>:

void transmitByte(uint8_t data)
{
    /* Wait for empty transmit buffer */
    loop_until_bit_is_set(UCSR0A, UDRE0);
 24e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 252:	95 ff       	sbrs	r25, 5
 254:	fc cf       	rjmp	.-8      	; 0x24e <transmitByte>
    UDR0 = data; /* send data */
 256:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 25a:	08 95       	ret

0000025c <receiveByte>:

uint8_t receiveByte(void)
{
    loop_until_bit_is_set(UCSR0A, RXC0); /* Wait for incoming data */
 25c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 260:	87 ff       	sbrs	r24, 7
 262:	fc cf       	rjmp	.-8      	; 0x25c <receiveByte>
    return UDR0;                         /* return register value */
 264:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 268:	08 95       	ret

0000026a <printString>:

/* Here are a bunch of useful printing commands */

void printString(const char myString[])
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	8c 01       	movw	r16, r24
    uint8_t i = 0;
 272:	c0 e0       	ldi	r28, 0x00	; 0
    while (myString[i])
 274:	f8 01       	movw	r30, r16
 276:	ec 0f       	add	r30, r28
 278:	f1 1d       	adc	r31, r1
 27a:	80 81       	ld	r24, Z
 27c:	81 11       	cpse	r24, r1
 27e:	04 c0       	rjmp	.+8      	; 0x288 <printString+0x1e>
    {
        transmitByte(myString[i]);
        i++;
    }
}
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret
void printString(const char myString[])
{
    uint8_t i = 0;
    while (myString[i])
    {
        transmitByte(myString[i]);
 288:	0e 94 27 01 	call	0x24e	; 0x24e <transmitByte>
        i++;
 28c:	cf 5f       	subi	r28, 0xFF	; 255
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <printString+0xa>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
