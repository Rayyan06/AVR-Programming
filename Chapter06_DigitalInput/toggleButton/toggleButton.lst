
toggleButton.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
    // ----------- Inits ----------- //
    uint8_t buttonWasPressed;                                   /* state */
    BUTTON_PORT |= (1 << BUTTON);     /* enable the pullup on the button */
  80:	5a 9a       	sbi	0x0b, 2	; 11
    LED_DDR = 0xFF;                      /* set up LED for output */
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
    initUSART();
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <initUSART>
#include "pinDefines.h"
#include "USART.h"


int main(void)
{
  8a:	c1 e0       	ldi	r28, 0x01	; 1
    initUSART();
    // ----------- Event Loop ----------- //

    while(1) {    
                                            /* Check if the switch button is pressed */
        if(bit_is_clear(PIND, BUTTON_PIN)) {   // Alternatively: ((1 << BUTTON_PIN) & PIND) == 0b00000000
  8c:	89 b1       	in	r24, 0x09	; 9
  8e:	29 b1       	in	r18, 0x09	; 9
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x18>
  94:	95 95       	asr	r25
  96:	87 95       	ror	r24
  98:	2a 95       	dec	r18
  9a:	e2 f7       	brpl	.-8      	; 0x94 <main+0x14>
  9c:	80 fd       	sbrc	r24, 0
  9e:	12 c0       	rjmp	.+36     	; 0xc4 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
            _delay_ms(50); // Add a delay for debouncing
            printBinaryByte(buttonWasPressed);
  b2:	8c 2f       	mov	r24, r28
  b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <printBinaryByte>
            if (buttonWasPressed == 0) {
  b8:	c1 11       	cpse	r28, r1
  ba:	e7 cf       	rjmp	.-50     	; 0x8a <main+0xa>
                LED_PORT ^= 0xFF;               // Toggle the LEDS
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	80 95       	com	r24
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	e3 cf       	rjmp	.-58     	; 0x8a <main+0xa>
                buttonWasPressed = 1;
            }
        } 
        else {                                              /* Not Pressed */                  
            buttonWasPressed = 0; 
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	e2 cf       	rjmp	.-60     	; 0x8c <main+0xc>

000000c8 <initUSART>:
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
  c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 83       	st	Z, r24
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e8:	08 95       	ret

000000ea <transmitByte>:
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <transmitByte>
  f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f6:	08 95       	ret

000000f8 <printBinaryByte>:
}

void printBinaryByte(uint8_t byte) {
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	c7 e0       	ldi	r28, 0x07	; 7
 102:	d0 e0       	ldi	r29, 0x00	; 0
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    if (bit_is_set(byte, bit))
 104:	08 2f       	mov	r16, r24
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	c8 01       	movw	r24, r16
 10a:	0c 2e       	mov	r0, r28
 10c:	02 c0       	rjmp	.+4      	; 0x112 <printBinaryByte+0x1a>
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <printBinaryByte+0x16>
 116:	80 ff       	sbrs	r24, 0
 118:	0a c0       	rjmp	.+20     	; 0x12e <printBinaryByte+0x36>
      transmitByte('1');
 11a:	81 e3       	ldi	r24, 0x31	; 49
    else
      transmitByte('0');
 11c:	0e 94 75 00 	call	0xea	; 0xea <transmitByte>
 120:	21 97       	sbiw	r28, 0x01	; 1
 122:	90 f7       	brcc	.-28     	; 0x108 <printBinaryByte+0x10>
  }
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	f5 cf       	rjmp	.-22     	; 0x11c <printBinaryByte+0x24>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
