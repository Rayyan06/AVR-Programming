
capSense.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initPinChangeInterrupt>:

// ------- Functions -------- //

void initPinChangeInterrupt(void)
{
    PCICR |= (1 << PCIE1); /* enable Pin-change interrupts 1 (bank C) */
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
    PCMSK1 |= (1 << PC1);  /* enable specific interrupt for our pin PC1 */
  b0:	ec e6       	ldi	r30, 0x6C	; 108
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
}
  ba:	08 95       	ret

000000bc <__vector_4>:

ISR(PCINT1_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
    chargeCycleCount++; /* count this change */
  ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
  ce:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
  d8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>

    CAP_SENSOR_DDR |= (1 << CAP_SENSOR); /* output mode */
  dc:	39 9a       	sbi	0x07, 1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <__vector_4+0x24>
  e4:	00 00       	nop
    _delay_us(1);                        /* charging delay */

    CAP_SENSOR_DDR &= ~(1 << CAP_SENSOR); /* set as input */
  e6:	39 98       	cbi	0x07, 1	; 7
    PCIFR |= (1 << PCIF1);                /* clear the pin-change interrupt */
  e8:	d9 9a       	sbi	0x1b, 1	; 27
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 104:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 108:	0f be       	out	0x3f, r0	; 63

int main(void)
{
    // -------- Inits --------- //
    clock_prescale_set(clock_div_1); /* full speed */
    initUSART();
 10a:	0e 94 b9 00 	call	0x172	; 0x172 <initUSART>
    printString("==[ Cap Sensor ]==\r\n\r\n");
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <printString>

    LED_DDR = 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 b9       	out	0x04, r24	; 4
    MCUCR |= (1 << PUD);                  /* disable all pullups */
 11a:	85 b7       	in	r24, 0x35	; 53
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	85 bf       	out	0x35, r24	; 53
    CAP_SENSOR_PORT |= (1 << CAP_SENSOR); /* we can leave output high */
 120:	41 9a       	sbi	0x08, 1	; 8

    initPinChangeInterrupt();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <initPinChangeInterrupt>
        sei();                               /* start up interrupts, counting */
        _delay_ms(SENSE_TIME);
        cli(); /* done */
        if (chargeCycleCount < THRESHOLD)
        {
            LED_PORT = 0xff;
 126:	cf ef       	ldi	r28, 0xFF	; 255

    // ------ Event loop ------ //
    while (1)
    {

        chargeCycleCount = 0;                /* reset counter */
 128:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 12c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
        CAP_SENSOR_DDR |= (1 << CAP_SENSOR); /* start with cap charged */
 130:	39 9a       	sbi	0x07, 1	; 7
        sei();                               /* start up interrupts, counting */
 132:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	80 e7       	ldi	r24, 0x70	; 112
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x42>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x4c>
 144:	00 00       	nop
        _delay_ms(SENSE_TIME);
        cli(); /* done */
 146:	f8 94       	cli
        if (chargeCycleCount < THRESHOLD)
 148:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 14c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 150:	80 3e       	cpi	r24, 0xE0	; 224
 152:	9e 42       	sbci	r25, 0x2E	; 46
 154:	60 f4       	brcc	.+24     	; 0x16e <main+0x76>
        {
            LED_PORT = 0xff;
 156:	c5 b9       	out	0x05, r28	; 5
        }
        else
        {
            LED_PORT = 0;
        }
        printWord(chargeCycleCount); /* for fine tuning */
 158:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 15c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 160:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <printWord>
        printString("\r\n");
 164:	84 e1       	ldi	r24, 0x14	; 20
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <printString>

    // ------ Event loop ------ //
    while (1)
    {

        chargeCycleCount = 0;                /* reset counter */
 16c:	dd cf       	rjmp	.-70     	; 0x128 <main+0x30>
        {
            LED_PORT = 0xff;
        }
        else
        {
            LED_PORT = 0;
 16e:	15 b8       	out	0x05, r1	; 5
 170:	f3 cf       	rjmp	.-26     	; 0x158 <main+0x60>

00000172 <initUSART>:
void printByte(uint8_t byte)
{
    /* Converts a byte to a string of decimal text, sends it */
    transmitByte('0' + (byte / 100));       /* Hundreds */
    transmitByte('0' + ((byte / 10) % 10)); /* Tens */
    transmitByte('0' + (byte % 10));        /* Ones */
 172:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 176:	87 e6       	ldi	r24, 0x67	; 103
 178:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8d 7f       	andi	r24, 0xFD	; 253
 184:	80 83       	st	Z, r24
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 192:	08 95       	ret

00000194 <transmitByte>:
 194:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 198:	95 ff       	sbrs	r25, 5
 19a:	fc cf       	rjmp	.-8      	; 0x194 <transmitByte>
 19c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a0:	08 95       	ret

000001a2 <printString>:
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	8c 01       	movw	r16, r24
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	f8 01       	movw	r30, r16
 1ae:	ec 0f       	add	r30, r28
 1b0:	f1 1d       	adc	r31, r1
 1b2:	80 81       	ld	r24, Z
 1b4:	81 11       	cpse	r24, r1
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <printString+0x1e>
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret
 1c0:	0e 94 ca 00 	call	0x194	; 0x194 <transmitByte>
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
 1c6:	f2 cf       	rjmp	.-28     	; 0x1ac <printString+0xa>

000001c8 <printWord>:
}

void printWord(uint16_t word)
{
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	8c 01       	movw	r16, r24
    transmitByte('0' + (word / 10000));       /* Ten-thousands */
 1d2:	60 e1       	ldi	r22, 0x10	; 16
 1d4:	77 e2       	ldi	r23, 0x27	; 39
 1d6:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	86 0f       	add	r24, r22
 1de:	0e 94 ca 00 	call	0x194	; 0x194 <transmitByte>
    transmitByte('0' + ((word / 1000) % 10)); /* Thousands */
 1e2:	c8 01       	movw	r24, r16
 1e4:	68 ee       	ldi	r22, 0xE8	; 232
 1e6:	73 e0       	ldi	r23, 0x03	; 3
 1e8:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 1ec:	cb 01       	movw	r24, r22
 1ee:	ca e0       	ldi	r28, 0x0A	; 10
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	be 01       	movw	r22, r28
 1f4:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 ca 00 	call	0x194	; 0x194 <transmitByte>
    transmitByte('0' + ((word / 100) % 10));  /* Hundreds */
 1fe:	c8 01       	movw	r24, r16
 200:	64 e6       	ldi	r22, 0x64	; 100
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 208:	cb 01       	movw	r24, r22
 20a:	be 01       	movw	r22, r28
 20c:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 210:	80 5d       	subi	r24, 0xD0	; 208
 212:	0e 94 ca 00 	call	0x194	; 0x194 <transmitByte>
    transmitByte('0' + ((word / 10) % 10));   /* Tens */
 216:	c8 01       	movw	r24, r16
 218:	be 01       	movw	r22, r28
 21a:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 21e:	18 2f       	mov	r17, r24
 220:	cb 01       	movw	r24, r22
 222:	be 01       	movw	r22, r28
 224:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	0e 94 ca 00 	call	0x194	; 0x194 <transmitByte>
    transmitByte('0' + (word % 10));          /* Ones */
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	81 0f       	add	r24, r17
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
{
    transmitByte('0' + (word / 10000));       /* Ten-thousands */
    transmitByte('0' + ((word / 1000) % 10)); /* Thousands */
    transmitByte('0' + ((word / 100) % 10));  /* Hundreds */
    transmitByte('0' + ((word / 10) % 10));   /* Tens */
    transmitByte('0' + (word % 10));          /* Ones */
 23a:	0c 94 ca 00 	jmp	0x194	; 0x194 <transmitByte>

0000023e <__udivmodhi4>:
 23e:	aa 1b       	sub	r26, r26
 240:	bb 1b       	sub	r27, r27
 242:	51 e1       	ldi	r21, 0x11	; 17
 244:	07 c0       	rjmp	.+14     	; 0x254 <__udivmodhi4_ep>

00000246 <__udivmodhi4_loop>:
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	a6 17       	cp	r26, r22
 24c:	b7 07       	cpc	r27, r23
 24e:	10 f0       	brcs	.+4      	; 0x254 <__udivmodhi4_ep>
 250:	a6 1b       	sub	r26, r22
 252:	b7 0b       	sbc	r27, r23

00000254 <__udivmodhi4_ep>:
 254:	88 1f       	adc	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	5a 95       	dec	r21
 25a:	a9 f7       	brne	.-22     	; 0x246 <__udivmodhi4_loop>
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
