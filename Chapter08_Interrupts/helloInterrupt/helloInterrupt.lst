
helloInterrupt.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#include <util/delay.h>

// ----------- Functions ----------- //
ISR(INT0_vect) /* Run every time their is a change in button state, interrupting the flow of the
                  program */
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
    if (bit_is_clear(BUTTON_PIN, BUTTON))
  8a:	4a 99       	sbic	0x09, 2	; 9
  8c:	06 c0       	rjmp	.+12     	; 0x9a <__vector_1+0x1a>
    {
        LED_PORT |= (1 << LED1);
  8e:	29 9a       	sbi	0x05, 1	; 5
    }
    else
    {
        LED_PORT &= ~(1 << LED1);
    }
}
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti
    {
        LED_PORT |= (1 << LED1);
    }
    else
    {
        LED_PORT &= ~(1 << LED1);
  9a:	29 98       	cbi	0x05, 1	; 5
    }
}
  9c:	f9 cf       	rjmp	.-14     	; 0x90 <__vector_1+0x10>

0000009e <initInterrupt0>:

void initInterrupt0(void)
{
    EIMSK |= (1 << INT0);  /* enable INT0 */
  9e:	e8 9a       	sbi	0x1d, 0	; 29
    EICRA |= (1 << ISC00); /* trigger when button changes */
  a0:	e9 e6       	ldi	r30, 0x69	; 105
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24
    sei();                 /* set (global) interrupt enable bit */
  aa:	78 94       	sei
}
  ac:	08 95       	ret

000000ae <main>:
int main(void)
{
    // ----------- Inits ----------- //
    LED_DDR = 0xff; /* All LEDs active */
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 b9       	out	0x04, r24	; 4
    BUTTON_PORT |= (1 << BUTTON);
  b2:	5a 9a       	sbi	0x0b, 2	; 11
    initInterrupt0();
  b4:	0e 94 4f 00 	call	0x9e	; 0x9e <initInterrupt0>

    while (1)
    {

        _delay_ms(800);
        LED_PORT ^= (1 << LED0); /* Toggle LED0 */
  b8:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	3f e0       	ldi	r19, 0x0F	; 15
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x12>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x1c>
  ca:	00 00       	nop
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	89 27       	eor	r24, r25
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	f3 cf       	rjmp	.-26     	; 0xba <main+0xc>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
